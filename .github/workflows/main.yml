name: Flutter APK Build (Diagnose-Fokus)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      ---
      - name: **DIAGNOSE: Aktuelle Dateien und Ordner auflisten**
        # Dieser Schritt ist ENTSCHEIDEND. Er zeigt uns, welche Dateien und Ordner
        # der Runner tatsächlich im Repository sieht, nachdem es ausgecheckt wurde.
        run: |
          echo "--- Inhalt des Repository-ROOT-Verzeichnisses ---"
          ls -F
          echo ""
          echo "--- Rekursive Auflistung (bis Tiefe 3) nach Checkout ---"
          # Zeigt die Struktur bis zu 3 Ebenen tief an.
          # Sucht auch nach 'pubspec.yaml' im gesamten ausgecheckten Bereich.
          find . -maxdepth 3 -print -exec ls -ld {} \;
          echo ""
          echo "--- Suche nach pubspec.yaml (im gesamten Repository) ---"
          find . -name "pubspec.yaml"
        working-directory: . # WICHTIG: Diesen Schritt IMMER im Root des Repositories ausführen

      - name: Flutter SDK einrichten
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'
          cache: true

      - name: Flutter-Abhängigkeiten installieren
        # Annahme: Der Flutter-Projektordner heißt 'cloning_app' und liegt im Root.
        # Wenn der Fehler hier auftritt, EXISTIERT 'cloning_app' NICHT an dieser Stelle.
        run: flutter pub get
        working-directory: ./cloning_app

      - name: Android APK erstellen
        run: flutter build apk --release
        working-directory: ./cloning_app

      - name: APK-Artefakt hochladen
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: cloning_app/build/app/outputs/flutter-apk/app-release.apk
          
