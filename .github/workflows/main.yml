name: Build Android APK

on:
  push:
    branches:
      - main  # Ändere dies zu 'master', wenn das dein Hauptbranch ist
  workflow_dispatch: # Ermöglicht manuelles Auslösen des Workflows

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Lädt deinen Code nach /home/runner/work/Cloning-App/Cloning-App/

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
          # Spezifiziere den Pfad, wo die Gradle-Dateien für das Caching gefunden werden.
          # Pfade sind relativ zum GITHUB_WORKSPACE (/home/runner/work/Cloning-App)
          cache-dependency-path: |
            Cloning-App/**/*.gradle*
            Cloning-App/**/gradle-wrapper.properties
            Cloning-App/**/gradle/libs.versions.toml # Falls du Version Catalogs nutzt
            Cloning-App/**/versions.properties # Falls vorhanden

      - name: Grant execute permission for gradlew
        # Das Arbeitsverzeichnis für diesen und die folgenden Schritte setzen
        working-directory: ./Cloning-App
        run: chmod +x ./gradlew

      - name: Build debug APK
        working-directory: ./Cloning-App
        run: ./gradlew assembleDebug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloning-app-debug-apk
          # Der Pfad zum Artefakt ist jetzt relativ zum GITHUB_WORKSPACE
          path: Cloning-App/app/build/outputs/apk/debug/app-debug.apk
