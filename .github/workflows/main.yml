# Name des Workflows, der in der GitHub Actions-Oberfläche angezeigt wird
name: Flutter APK Build (Neu & Diagnostisch)

# Legt fest, wann dieser Workflow ausgeführt wird
on:
  push:
    branches:
      - main
  workflow_dispatch: # Ermöglicht das manuelle Starten des Workflows über die GitHub Actions UI

# Definiert die Aufgaben (Jobs), die im Workflow ausgeführt werden
jobs:
  build:
    # Der Typ des Runners, auf dem der Job ausgeführt wird
    runs-on: ubuntu-latest

    # Die einzelnen Schritte des Jobs
    steps:
      # Schritt 1: Das Repository auschecken
      # Dies holt deinen Code in den Runner.
      - name: Repository auschecken
        uses: actions/checkout@v4

      # --- DIAGNOSE-SCHRITT: EXTREM WICHTIG ZUR FEHLERSUCHE ---
      # Schritt 2: Zeige die genaue Verzeichnisstruktur nach dem Checkout an.
      # Diese Ausgabe hilft zu sehen, wo sich dein Flutter-Projekt befindet.
      - name: Aktuelle Dateien und Ordner im Repository auflisten (DIAGNOSE)
        run: |
          echo "--- Dateien und Ordner im Repository-Root ---"
          ls -F
          echo ""
          echo "--- Rekursive Auflistung der Inhalte (bis Tiefe 3) ---"
          find . -maxdepth 3 -print -exec ls -ld {} \;
          echo ""
          echo "--- Suche nach pubspec.yaml ---"
          find . -name "pubspec.yaml"
        working-directory: . # Diesen Schritt IMMER aus dem Repository-Root ausführen

      # Schritt 3: Flutter SDK einrichten
      # Verwendet die offizielle Flutter Action, um das SDK zu installieren.
      - name: Flutter SDK einrichten
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x' # Verwendet die neueste Version von Flutter 3
          channel: 'stable'      # Verwendet den stabilen Flutter-Kanal
          cache: true            # Aktiviert das Caching für das Flutter SDK und Pub-Abhängigkeiten

      # Schritt 4: Flutter-Abhängigkeiten installieren
      # Dieser Schritt versucht, 'flutter pub get' im erwarteten 'cloning_app' Ordner auszuführen.
      # Wenn der Ordner nicht existiert, wird dieser Schritt fehlschlagen.
      - name: Flutter-Abhängigkeiten installieren
        # Annahme: Das Flutter-Projekt liegt im Ordner 'cloning_app' im Repository-Root.
        # Sollte der Ordner anders heißen oder direkt im Root liegen, muss 'working-directory' angepasst werden.
        run: flutter pub get
        working-directory: ./cloning_app # Dies ist der erwartete Pfad für dein Flutter-Projekt

      # Schritt 5: Die Android APK erstellen
      # Erstellt die Release-APK, ebenfalls im erwarteten Projektverzeichnis.
      - name: Android APK erstellen
        run: flutter build apk --release
        working-directory: ./cloning_app # Gleicher Pfad wie für pub get

      # Schritt 6: Die erstellte APK als Artefakt hochladen
      # Der Pfad muss weiterhin relativ zum Stammverzeichnis des Repositories angegeben werden.
      - name: APK-Artefakt hochladen
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          # Pfad zur APK relativ zum Repository-Root
          path: cloning_app/build/app/outputs/flutter-apk/app-release.apk
          
