name: Build Android APK

on:
  push:
    branches:
      - main  # Ändere dies zu 'master', wenn das dein Hauptbranch ist
  workflow_dispatch: # Ermöglicht manuelles Auslösen des Workflows

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest # Verwendet einen Linux-Runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Lädt deinen Code herunter

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11' # Das Projekt scheint älter zu sein, JDK 11 ist eine sichere Wahl
          distribution: 'temurin'
          cache: gradle # Cache Gradle-Abhängigkeiten für schnellere Builds

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew # Macht das Gradle Wrapper Skript ausführbar

      # WICHTIG: Akzeptiere die Android SDK-Lizenzen (optional, falls benötigt)
      # Dieser Schritt ist manchmal nötig, wenn der Runner die Lizenzen nicht vorab akzeptiert hat.
      # Das "Cloning-App" Repository ist älter, daher ist dies möglicherweise nicht sofort erforderlich,
      # aber gut zu wissen, falls der Build fehlschlägt.
      # - name: Accept Android SDK licenses
      #   run: yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses || true

      - name: Build debug APK
        run: ./gradlew assembleDebug # Der Befehl zum Erstellen der Debug-APK
        # Wenn das Android-Projekt in einem Unterverzeichnis wäre (z.B. 'AndroidApp'),
        # müsstest du 'working-directory: ./AndroidApp' hinzufügen.
        # Für "Cloning-App" ist das Stammverzeichnis das Projektverzeichnis.

      und dem Build-Typ ('debug').
