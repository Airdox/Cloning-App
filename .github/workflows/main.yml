      - name: Inspect and Unzip the Android project
        if: steps.zip_check.outputs.zip_present == 'true'
        run: |
          ZIP_FILE="${{ github.workspace }}/voice_cloning_app.zip"
          EXTRACT_DIR="${{ github.workspace }}/android_project_extracted"

          echo "--- Listing contents of ZIP file ($ZIP_FILE) ---"
          unzip -l "$ZIP_FILE" # SEHR WICHTIG FÜR DEBUGGING

          echo "--- Unzipping $ZIP_FILE to $EXTRACT_DIR ---"
          mkdir -p "$EXTRACT_DIR"
          unzip -q "$ZIP_FILE" -d "$EXTRACT_DIR"

          echo "--- Listing contents of extraction directory ($EXTRACT_DIR) ---"
          ls -AlR "$EXTRACT_DIR" # SEHR WICHTIG FÜR DEBUGGING

          # --- ANPASSUNG HIER BASIEREND AUF DEN LOGS ---
          # Annahme: Nach dem Entpacken ist die Struktur z.B.:
          # $EXTRACT_DIR/home/someuser/Cloning-App-Master/ (enthält build.gradle etc.)
          # Du musst "someuser/Cloning-App-Master" mit dem ersetzen, was die Logs zeigen!
          #
          # Schau dir die Ausgabe von `unzip -l` und `ls -AlR "$EXTRACT_DIR"` genau an!
          # Finde heraus, in welchem Unterverzeichnis von $EXTRACT_DIR/home/ sich build.gradle befindet.

          # Beispiel: Wenn build.gradle in $EXTRACT_DIR/home/airdox/Desktop/Cloning-App/ ist:
          # ACTUAL_PROJECT_ROOT_RELATIVE_TO_EXTRACT_DIR="home/airdox/Desktop/Cloning-App"

          # Fallback, falls die automatische Erkennung nicht klappt oder zur manuellen Einstellung:
          ACTUAL_PROJECT_ROOT_CANDIDATE=""

          # Versuche, den Pfad automatisch zu finden
          FOUND_PROJECT_DIR=$(find "$EXTRACT_DIR" -name 'gradlew' -type f -printf '%h' -quit)

          if [ -n "$FOUND_PROJECT_DIR" ]; then
            echo "Found 'gradlew' in: $FOUND_PROJECT_DIR"
            ACTUAL_PROJECT_ROOT_CANDIDATE="$FOUND_PROJECT_DIR"
            echo "Actual project root automatically set to: $ACTUAL_PROJECT_ROOT_CANDIDATE"
          else
            echo "WARNING: 'gradlew' (or 'build.gradle') not automatically found."
            echo "Please check the ZIP structure from 'unzip -l' and 'ls -AlR' logs."
            echo "You MUST manually set ACTUAL_PROJECT_ROOT_CANDIDATE in the workflow based on logs."
            # Setze hier einen manuellen Pfad, wenn die automatische Erkennung fehlschlägt, z.B.:
            # ACTUAL_PROJECT_ROOT_CANDIDATE="$EXTRACT_DIR/home/DEIN_PFAD_HIER/ProjektOrdner"
            # Wenn du hier nichts setzt und find fehlschlägt, wird der nächste Schritt scheitern.
            # Für jetzt lassen wir es leer, damit der Fehler offensichtlich wird, falls 'find' nichts findet.
          fi

          if [ -z "$ACTUAL_PROJECT_ROOT_CANDIDATE" ]; then
            echo "CRITICAL: Could not determine ACTUAL_PROJECT_ROOT_CANDIDATE. Aborting."
            exit 1
          fi

          TARGET_PROJECT_DIR="${{ github.workspace }}/android_project"
          echo "Preparing final project directory at $TARGET_PROJECT_DIR, linking from $ACTUAL_PROJECT_ROOT_CANDIDATE"

          rm -rf "$TARGET_PROJECT_DIR" # Altes Verzeichnis entfernen
          # Erstelle den Zielordner, falls er nicht existiert (notwendig für mv)
          mkdir -p "$TARGET_PROJECT_DIR"

          # Verschiebe den Inhalt des gefundenen Projektordners in den Zielordner
          # Wir verwenden 'shopt -s dotglob' um auch versteckte Dateien (wie .gradle) zu verschieben
          shopt -s dotglob
          mv "$ACTUAL_PROJECT_ROOT_CANDIDATE"/* "$TARGET_PROJECT_DIR/"
          shopt -u dotglob # Setze dotglob zurück

          # Alternativ zum Verschieben, wenn du einen Symlink bevorzugst (ACTUAL_PROJECT_ROOT_CANDIDATE darf dann nicht $EXTRACT_DIR selbst sein):
          # ln -s "$ACTUAL_PROJECT_ROOT_CANDIDATE" "$TARGET_PROJECT_DIR"

          echo "--- Listing contents of final android_project directory ($TARGET_PROJECT_DIR) ---"
          ls -Al "$TARGET_PROJECT_DIR"
        shell: bash
