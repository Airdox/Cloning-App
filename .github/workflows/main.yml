# Name des Workflows
name: Build Android APK with BeeWare Briefcase

# Trigger für den Workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    # Der Job läuft auf der neuesten Ubuntu-Version
    runs-on: ubuntu-latest

    steps:
    # 1. Repository auschecken
    - name: Repository auschecken
      uses: actions/checkout@v4

    # 2. Python-Umgebung einrichten
    - name: Python einrichten
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Oder Ihre bevorzugte Python-Version

    # 3. Java Development Kit (JDK) einrichten (für Android SDK, von Briefcase benötigt)
    - name: Java JDK einrichten (für Android SDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # 4. Briefcase installieren
    - name: Briefcase installieren
      run: |
        python -m pip install --upgrade pip
        pip install briefcase

    # 5. Konfiguriere Briefcase und erstelle die Android APK
    - name: Konfiguriere Briefcase und erstelle die Android APK
      run: |
        # Briefcase benötigt eine 'pyproject.toml'-Datei im Root Ihres Projekts.
        # Diese Datei definiert Ihre App und ihre Einstellungen für Briefcase.
        #
        # WICHTIG: Sie müssen diese 'pyproject.toml'-Datei tatsächlich
        # in Ihrem Git-Repository erstellen und verwalten.
        # Der folgende 'cat <<EOF > pyproject.toml'-Block ist NUR ZUR DEMONSTRATION
        # und erstellt eine temporäre Datei im Workflow. In einem realen Projekt
        # sollte diese Datei bereits im Repository vorhanden sein.

        # Beispielhafte Erstellung einer minimalen main.py, falls noch nicht vorhanden
        # (Briefcase erwartet eine Python-App).
        # Im echten Projekt sollte Ihre main.py im Root oder im 'src'-Ordner liegen.
        if [ ! -f main.py ]; then
            echo "print('Hallo von meiner BeeWare Android App!')" > main.py
        fi

        # Erstellen Sie die pyproject.toml-Datei in Ihrem Repository.
        # Eine Beispielkonfiguration finden Sie im nächsten Dokument.
        # Wenn Sie diese Datei bereits haben, ignorieren Sie diesen Block.
        cat <<EOF > pyproject.toml
        [project]
        name = "MyPythonApp"
        version = "1.0.0"
        description = "Eine einfache Python-App, gebaut mit BeeWare Briefcase."
        requires-python = ">=3.9"

        [tool.briefcase]
        project_name = "MyPythonApp"
        bundle = "org.example" # Ihre eindeutige Paket-ID (z.B. com.ihrefirma)
        author = "Ihr Name"
        author_email = "ihre.email@example.com"
        url = "https://example.com/mypythonapp"
        license = "MIT"
        requires = [] # Fügen Sie hier Ihre Python-Abhängigkeiten hinzu (z.B. ["kivy", "requests"])

        [tool.briefcase.app.mypythonapp] # Der Name hier muss dem 'project.name' entsprechen (kleingeschrieben und Bindestriche statt Leerzeichen)
        sources = ["."] # Angenommen, Ihre Python-Quellcode-Dateien (z.B. main.py) befinden sich im Root-Verzeichnis
        main_module = "main" # Der Name der Haupt-Python-Datei ohne .py-Endung (z.B. main.py -> main)
        long_description = "Eine ausführlichere Beschreibung Ihrer Anwendung."
        
        [tool.briefcase.app.mypythonapp.android]
        target_device = "generic" # Kann auch "Pixel 4" oder andere sein
        sdk_version = "34" # Die Android API-Level, auf das Sie abzielen
        min_sdk_version = "21" # Die minimale Android API-Level, die Ihre App unterstützt
        build_tools_version = "34.0.0" # Die Android Build Tools Version
        supported_abis = ["arm64-v8a"] # Ziel-Architekturen. arm64-v8a ist für moderne Geräte üblich.
        # permissions = ["android.permission.INTERNET"] # Optional: Fügen Sie hier benötigte Android-Berechtigungen hinzu
        EOF

        echo "Führe Briefcase-Update aus, um SDK-Tools und Support-Pakete herunterzuladen..."
        briefcase update android --update-tools --update-support
        
        echo "Starte den Briefcase-Build für Android..."
        briefcase build android

        # Briefcase platziert die APKs typischerweise in einem Unterordner.
        # Wir suchen die generierte APK-Datei.
        APK_PATH=$(find android -name "*.apk" | head -n 1)
        if [ -z "$APK_PATH" ]; then
            echo "FEHLER: APK-Datei nicht gefunden. Überprüfen Sie die Briefcase-Ausgabe auf Fehler."
            exit 1
        fi
        echo "APK erfolgreich erstellt unter: $APK_PATH"
        echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV # Setzt die Umgebungsvariable für den Upload

    # 6. Erstelltes APK als Artefakt hochladen
    - name: APK-Artefakt hochladen
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: App-Debug-APK
        path: ${{ env.APK_PATH }} # Verwendet den dynamisch gefundenen Pfad
        retention-days: 7
        
