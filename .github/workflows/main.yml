# Name des Workflows
name: Build Android APK with Python-for-Android

# Trigger für den Workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    # Der Job läuft auf der neuesten Ubuntu-Version
    runs-on: ubuntu-latest

    steps:
    # 1. Repository auschecken
    - name: Repository auschecken
      uses: actions/checkout@v4

    # 2. Python-Umgebung einrichten
    - name: Python einrichten
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Or your preferred Python version

    # 3. System-Abhängigkeiten für python-for-android installieren
    - name: System-Abhängigkeiten installieren
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip python3-pip \
          autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev libtinfo-dev \
          cmake libffi-dev libssl-dev patch wget \
          openjdk-17-jdk # Install JDK via apt for p4a, to ensure it's available globally

    # 4. Java Development Kit (JDK) einrichten (Optional, if installed via apt above)
    # This step is redundant if openjdk-17-jdk is installed via apt.
    # Keeping it here as a fallback or for specific setups.
    - name: Java JDK einrichten (ensure path)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # 5. Android SDK Command-Line Tools einrichten
    - name: Android SDK Command-Line Tools einrichten
      run: |
        echo "Lade Android Command-Line Tools herunter..."
        wget -q "https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip" -O commandlinetools.zip

        ANDROID_SDK_ROOT="${HOME}/android-sdk"
        mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
        unzip -q commandlinetools.zip -d "${ANDROID_SDK_ROOT}/cmdline-tools"
        mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
        rm commandlinetools.zip

        echo "Setze ANDROID_HOME und aktualisiere den PATH..."
        echo "ANDROID_HOME=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
        echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "${ANDROID_SDK_ROOT}/platform-tools" >> $GITHUB_PATH

        # Ensure that tools directory is in PATH for sdkmanager
        echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest" >> $GITHUB_PATH

    # 6. Android SDK-Komponenten installieren und Lizenzen akzeptieren
    - name: SDK-Lizenzen akzeptieren und spezifische Build-Tools installieren
      run: |
        echo "Akzeptiere automatisch alle SDK-Lizenzen..."
        yes | sdkmanager --licenses > /dev/null

        echo "Installiere proaktiv die von python-for-android benötigten SDK-Komponenten..."
        # p4a might need specific platform versions, e.g., "platforms;android-33"
        # and a specific build-tools version. Adjust as per your needs.
        sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-34"

    # 7. Python-Abhängigkeiten installieren (für python-for-android)
    - name: Python-Abhängigkeiten installieren
      run: |
        python -m pip install --upgrade pip
        # Corrected: Use an available version of python-for-android
        pip install "cython==0.29.34" "python-for-android==2024.1.21"

    # 8. APK mit python-for-android erstellen
    - name: APK mit python-for-android erstellen
      run: |
        # Example p4a command. YOU WILL NEED TO CUSTOMIZE THIS.
        # - The '--name' and '--version' arguments are for your app.
        # - The '--package' argument is your unique package ID (e.g., com.yourcompany.yourapp).
        # - The '--requirements' argument lists your Python dependencies.
        # - The '--private' argument points to your application's Python source code directory.
        # - The '--main' argument points to your main.py file within the --private directory.
        # - The '--arch' specifies the architecture. 'arm64-v8a' is common for modern devices.
        # - The '--debug' flag builds a debuggable APK.
        # - The '--sdk' and '--android-api' specifies the target SDK version.
        # - The '--build-tools' specifies the build tools version.

        # Adjust these variables to match your project
        APP_NAME="MyPythonApp"
        APP_VERSION="1.0"
        PACKAGE_NAME="org.example.myandroidapp" # IMPORTANT: Change this!
        PYTHON_SOURCE_DIR="." # Assuming your Python code is in the root of the repo
        MAIN_PY_FILE="main.py" # Your main Python entry point

        # You might need to add other recipes for libraries like Kivy, Pygame, etc.
        # Example for a Kivy app: --requirements=python3,kivy
        # For a pure Python app: --requirements=python3

        # Use specific versions for android-api and build-tools that you installed
        ANDROID_SDK_VERSION="34" # Corresponds to platforms;android-34
        ANDROID_BUILD_TOOLS_VERSION="34.0.0" # Corresponds to build-tools;34.0.0

        python -m p4a apk \
            --debug \
            --name "$APP_NAME" \
            --version "$APP_VERSION" \
            --package "$PACKAGE_NAME" \
            --requirements=python3 \
            --private "$PYTHON_SOURCE_DIR" \
            --main "$PYTHON_SOURCE_DIR/$MAIN_PY_FILE" \
            --arch arm64-v8a \
            --android-api "$ANDROID_SDK_VERSION" \
            --build-tools "$ANDROID_BUILD_TOOLS_VERSION" \
            --add-service your_service_name:your_service_file.py # Add this if you have services
            # Add more p4a options as needed, e.g., --permission, --orientation, etc.

    # 9. Erstelltes APK als Artefakt hochladen
    - name: APK-Artefakt hochladen
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: App-Debug-APK
        # p4a places the APK in the 'bin' directory by default, similar to Buildozer
        path: bin/*.apk
        retention-days: 7
        
