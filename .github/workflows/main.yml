# Name des Workflows
name: Build Android APK with Python-for-Android

# Trigger für den Workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    # Der Job läuft auf der neuesten Ubuntu-Version
    runs-on: ubuntu-latest

    steps:
    # 1. Repository auschecken
    - name: Repository auschecken
      uses: actions/checkout@v4

    # 2. Python-Umgebung einrichten
    - name: Python einrichten
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Oder Ihre bevorzugte Python-Version

    # 3. System-Abhängigkeiten für python-for-android installieren
    - name: System-Abhängigkeiten installieren
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip python3-pip \
          autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev libtinfo-dev \
          cmake libffi-dev libssl-dev patch wget \
          openjdk-17-jdk # JDK über apt installieren, um sicherzustellen, dass es global verfügbar ist

    # 4. Java Development Kit (JDK) einrichten (Optional, falls oben über apt installiert)
    # Dieser Schritt ist redundant, wenn openjdk-17-jdk über apt installiert wird.
    # Behalte ihn hier als Fallback oder für spezifische Setups.
    - name: Java JDK einrichten (Pfad sicherstellen)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # 5. Android SDK Command-Line Tools einrichten
    - name: Android SDK Command-Line Tools einrichten
      run: |
        echo "Lade Android Command-Line Tools herunter..."
        wget -q "https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip" -O commandlinetools.zip

        ANDROID_SDK_ROOT="${HOME}/android-sdk"
        mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
        unzip -q commandlinetools.zip -d "${ANDROID_SDK_ROOT}/cmdline-tools"
        mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
        rm commandlinetools.zip

        echo "Setze ANDROID_HOME und aktualisiere den PATH..."
        echo "ANDROID_HOME=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
        echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "${ANDROID_SDK_ROOT}/platform-tools" >> $GITHUB_PATH

        # Sicherstellen, dass das Tools-Verzeichnis im PATH für sdkmanager ist
        echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest" >> $GITHUB_PATH

    # 6. Android SDK-Komponenten installieren und Lizenzen akzeptieren
    - name: SDK-Lizenzen akzeptieren und spezifische Build-Tools installieren
      run: |
        echo "Akzeptiere automatisch alle SDK-Lizenzen..."
        yes | sdkmanager --licenses > /dev/null

        echo "Installiere proaktiv die von python-for-android benötigten SDK-Komponenten..."
        # p4a benötigt möglicherweise spezifische Plattformversionen, z.B. "platforms;android-33"
        # und eine spezifische Build-Tools-Version. Passen Sie diese an Ihre Bedürfnisse an.
        sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-34"

    # 7. Python-Abhängigkeiten installieren (für python-for-android)
    - name: Python-Abhängigkeiten installieren
      run: |
        python -m pip install --upgrade pip
        # Korrigiert: Eine verfügbare Version von python-for-android verwenden
        pip install "cython==0.29.34" "python-for-android==2024.1.21"

    # 8. APK mit python-for-android erstellen
    - name: APK mit python-for-android erstellen
      run: |
        # Beispiel p4a-Befehl. SIE MÜSSEN DIESEN ANPASSEN.
        # - Die Argumente '--name' und '--version' sind für Ihre App.
        # - Das Argument '--package' ist Ihre eindeutige Paket-ID (z.B. com.ihrefirma.ihreapp).
        # - Das Argument '--requirements' listet Ihre Python-Abhängigkeiten auf.
        # - Das Argument '--private' zeigt auf das Verzeichnis mit dem Python-Quellcode Ihrer Anwendung.
        # - Das Argument '--main' zeigt auf Ihre main.py-Datei innerhalb des --private-Verzeichnisses.
        # - Das Argument '--arch' gibt die Architektur an. 'arm64-v8a' ist gängig für moderne Geräte.
        # - Das Flag '--debug' erstellt eine debugfähige APK.
        # - '--sdk' und '--android-api' geben die Ziel-SDK-Version an.
        # - '--build-tools' gibt die Build-Tools-Version an.

        # Passen Sie diese Variablen an Ihr Projekt an
        APP_NAME="MyPythonApp"
        APP_VERSION="1.0"
        PACKAGE_NAME="org.example.myandroidapp" # WICHTIG: Ändern Sie dies!
        PYTHON_SOURCE_DIR="." # Angenommen, Ihr Python-Code befindet sich im Root des Repos
        MAIN_PY_FILE="main.py" # Ihr Haupt-Python-Einstiegspunkt

        # Sie müssen möglicherweise weitere Recipes für Bibliotheken wie Kivy, Pygame usw. hinzufügen.
        # Beispiel für eine Kivy-App: --requirements=python3,kivy
        # Für eine reine Python-App: --requirements=python3

        # Verwenden Sie spezifische Versionen für android-api und build-tools, die Sie installiert haben
        ANDROID_SDK_VERSION="34" # Entspricht platforms;android-34
        ANDROID_BUILD_TOOLS_VERSION="34.0.0" # Entspricht build-tools;34.0.0

        # Sicherstellen, dass die Python-Umgebung korrekt aktiviert ist und p4a zugänglich ist
        # Die 'python -m'-Syntax ist generell robust, aber das Hinzufügen des vollständigen Pfads zu Python
        # kann in einigen Fällen Mehrdeutigkeiten beseitigen.
        # p4a-Installation vor dem Ausführen überprüfen
        echo "Überprüfe die python-for-android Installation..."
        pip show python-for-android || { echo "python-for-android nicht gefunden. Überprüfen Sie den vorherigen Installationsschritt."; exit 1; }

        echo "Führe den python-for-android Build-Befehl aus..."
        /opt/hostedtoolcache/Python/3.9.23/x64/bin/python -m p4a apk \
            --debug \
            --name "$APP_NAME" \
            --version "$APP_VERSION" \
            --package "$PACKAGE_NAME" \
            --requirements=python3 \
            --private "$PYTHON_SOURCE_DIR" \
            --main "$PYTHON_SOURCE_DIR/$MAIN_PY_FILE" \
            --arch arm64-v8a \
            --android-api "$ANDROID_SDK_VERSION" \
            --build-tools "$ANDROID_BUILD_TOOLS_VERSION" \
            --add-service your_service_name:your_service_file.py # Fügen Sie dies hinzu, wenn Sie Services haben
            # Weitere p4a-Optionen nach Bedarf hinzufügen, z.B. --permission, --orientation, etc.

    # 9. Erstelltes APK als Artefakt hochladen
    - name: APK-Artefakt hochladen
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: App-Debug-APK
        # p4a legt die fertige APK-Datei standardmäßig im 'bin'-Verzeichnis ab
        path: bin/*.apk
        retention-days: 7
        
