name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Ermöglicht manuelles Auslösen des Workflows

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Repository auschecken
      uses: actions/checkout@v3

    - name: Python einrichten
      uses: actions/setup-python@v4
      with:
        python-version: '3.9.13'  # Exakt die Version aus buildozer.spec

    - name: System-Abhängigkeiten installieren
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip python3-pip \
          autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev libtinfo-dev \
          cmake libffi-dev libssl-dev patch wget

    - name: JDK für Android und Ant einrichten
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Apache Ant manuell vorbereiten (verbessert)
      run: |
        echo "Bereite Apache Ant 1.10.12 manuell vor..."
        mkdir -p /home/runner/.buildozer/android/platform
        cd /home/runner/.buildozer/android/platform

        # Versuche, von mehreren Spiegelservern herunterzuladen, bis einer erfolgreich ist
        ANT_URLS=(
          "https://dlcdn.apache.org/ant/binaries/apache-ant-1.10.12-bin.tar.gz"
          "https://downloads.apache.org/ant/binaries/apache-ant-1.10.12-bin.tar.gz"
          "https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.12-bin.tar.gz"
        )
        
        DOWNLOAD_SUCCESS=false
        for URL in "${ANT_URLS[@]}"; do
          echo "Versuche Download von: $URL"
          if wget -q "$URL" -O apache-ant-1.10.12-bin.tar.gz; then
            DOWNLOAD_SUCCESS=true
            echo "Download erfolgreich von: $URL"
            break
          else
            echo "Download fehlgeschlagen von: $URL"
          fi
        done

        if [ "$DOWNLOAD_SUCCESS" = false ]; then
          echo "Fehler: Konnte Apache Ant nicht von den bereitgestellten URLs herunterladen."
          exit 1
        fi
        
        tar -xf apache-ant-1.10.12-bin.tar.gz
        rm apache-ant-1.10.12-bin.tar.gz
        echo "Ant-Version (sollte jetzt mit JDK funktionieren):"
        /home/runner/.buildozer/android/platform/apache-ant-1.10.12/bin/ant -version

    - name: Installiere Python-Abhängigkeiten
      run: |
        echo "Installiere Python-Abhängigkeiten..."
        python -m pip install --upgrade pip
        pip install cython==0.29.24
        pip install buildozer==1.5.0 pyjnius

    - name: Android SDK und NDK einrichten (mit spezialisierter Action und spezifischen Versionen)
      uses: android-actions/setup-android@v2
      with:
        api-level: 27
        # build-tools: 30.0.3 # <-- Diese Zeile wurde entfernt, da wir manuell installieren
        ndk: 25b

    - name: Explizit Android Build-Tools 36.0.0 installieren und Lizenzen akzeptieren
      run: |
        echo "Installiere Android Build-Tools 36.0.0 und akzeptiere Lizenzen..."
        # Stellen Sie sicher, dass ANDROID_HOME gesetzt ist. Die setup-android Action tut dies.
        # Installiere build-tools;36.0.0 explizit und akzeptiere deren Lizenzen.
        yes | "$ANDROID_HOME"/cmdline-tools/latest/bin/sdkmanager "build-tools;36.0.0" || true
        # Optional: Akzeptiere alle Lizenzen erneut, um sicherzugehen, dass keine anderen fehlen
        yes | "$ANDROID_HOME"/cmdline-tools/latest/bin/sdkmanager --licenses || true


    - name: Umgebung und Pfade debuggen (nach allen SDK/NDK Setups und Lizenzakzeptanz)
      run: |
        echo "--- Aktueller Umgebungs-Debug ---"
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Python version:"
        python --version
        echo "Buildozer version:"
        buildozer --version
        echo "Java version (should be from setup-java):"
        java -version
        echo "ANT_HOME (if set): $ANT_HOME"
        echo "PATH: $PATH"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        
        echo "Inhalt von $ANDROID_HOME/tools/bin/ :"
        ls -la "$ANDROID_HOME/tools/bin/" || echo "$ANDROID_HOME/tools/bin/ nicht gefunden."
        echo "Inhalt von $ANDROID_HOME/cmdline-tools/latest/bin/ :"
        ls -la "$ANDROID_HOME/cmdline-tools/latest/bin/" || echo "$ANDROID_HOME/cmdline-tools/latest/bin/ nicht gefunden."
        
        echo "Inhalt von $ANDROID_HOME/build-tools/ :"
        ls -la "$ANDROID_HOME/build-tools/" || echo "$ANDROID_HOME/build-tools/ nicht gefunden."
        ls -la "$ANDROID_HOME/build-tools/36.0.0/aidl" || echo "Aidl 36.0.0 nicht gefunden." # <-- Prüfe auf 36.0.0
        echo "--- Ende Umgebungs-Debug ---"

    - name: buildozer.spec für GitHub Actions anpassen (Pfade von Action nutzen)
      run: |
        echo "Passe buildozer.spec an, um Pfade von setup-android Action zu nutzen..."
        sed -i 's/^# *android.sdk = 24/android.sdk = 27/' buildozer.spec # Passen Sie dies an Ihre Ziel-API an (hier 27)
        sed -i 's/^# *android.ndk = 25b/android.ndk = 25b/' buildozer.spec
        
        sed -i '/^android.sdk_path =/d' buildozer.spec
        sed -i '/^android.ndk_path =/d' buildozer.spec # <-- KORRIGIERT!

        echo "android.sdk_path = $ANDROID_HOME" >> buildozer.spec
        echo "android.ndk_path = $ANDROID_NDK_ROOT" >> buildozer.spec

        # Wenn Buildozer explizit 30.0.3 anfordert, ändern Sie dies auf 36.0.0 oder entfernen Sie die Zeile,
        # damit es die neueste verfügbare Version verwendet.
        # Beispiel: sed -i 's/^android.buildtool = 30.0.3/android.buildtool = 36.0.0/' buildozer.spec
        # Wenn android.buildtool nicht explizit gesetzt ist, braucht es keine Änderung.

        if ! grep -q "android.add_aab_cmdline_tools = 1" buildozer.spec; then
          echo "android.add_aab_cmdline_tools = 1" >> buildozer.spec
          echo "Hinzugefügt: android.add_aab_cmdline_tools = 1"
        fi

        echo "Aktualisierter Inhalt von buildozer.spec:"
        cat buildozer.spec

    - name: APK mit Buildozer erstellen (Debug-Modus)
      run: |
        echo "Starte APK-Build mit Buildozer..."
        buildozer -v android debug

    - name: Nach APK suchen
      run: |
        echo "--- Suche nach APK im bin-Verzeichnis ---"
        ls -la bin/ || echo "bin-Verzeichnis nicht gefunden oder leer."
        echo "--- Suche rekursiv nach APK-Dateien ---"
        find . -name "*.apk" || echo "Keine APK-Dateien gefunden."

    - name: APK-Artefakt hochladen
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: voice-cloning-app-debug
        path: |
          bin/*.apk
          .buildozer/android/platform/build-*/dists/*/build/outputs/apk/debug/*.apk
        retention-days: 7
        
