# Name des Workflows
name: Android APK mit BeeWare Briefcase bauen

# Trigger für den Workflow
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Ermöglicht das manuelle Starten des Workflows über die GitHub Actions UI

env:
  PYTHON_VERSION: '3.9'
  JAVA_VERSION: '17'
  BRIEFCASE_VERSION: '0.3.14'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Verhindert hängende Builds

    steps:
    # 1. Repository auschecken
    - name: Repository auschecken
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Vollständige Historie für bessere Debugging-Informationen

    # 2. Python-Umgebung einrichten
    - name: Python einrichten
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        # Kein Cache hier, da pyproject.toml erst später erstellt wird

    # 3. Java Development Kit (JDK) einrichten
    - name: Java JDK einrichten (für Android SDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    # 4. Android SDK Setup (explizit für bessere Kontrolle)
    - name: Android SDK einrichten
      uses: android-actions/setup-android@v3

    # 5. Briefcase installieren
    - name: Pip Cache einrichten
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Briefcase installieren
      run: |
        set -e
        echo "Aktualisiere pip und installiere Briefcase Version ${{ env.BRIEFCASE_VERSION }}"
        python -m pip install --upgrade pip setuptools wheel
        pip install briefcase==${{ env.BRIEFCASE_VERSION }}
        echo "Briefcase-Installation abgeschlossen."
        briefcase --version

    # 6. Bereite App-Struktur vor und erstelle die Android APK
    - name: Bereite App-Struktur vor und erstelle die Android APK
      run: |
        set -e
        
        echo "--- START: Vorbereitung der App-Struktur und pyproject.toml ---"
        echo "Aktuelles Arbeitsverzeichnis: $(pwd)"
        echo "Benutzer: $(whoami)"
        echo "Python Version: $(python --version)"
        echo "Java Version: $(java -version)"

        # Cleanup alte Konfigurationsdateien
        for file in buildozer.spec main_apk.py project.toml; do
            if [ -f "$file" ]; then
                echo "Entferne alte Konfigurationsdatei: $file"
                rm "$file"
            fi
        done

        # App-Struktur erstellen
        APP_SOURCE_ROOT="src" 
        APP_PACKAGE_NAME="mypythonapp" 
        APP_PACKAGE_PATH="$APP_SOURCE_ROOT/$APP_PACKAGE_NAME"

        echo "Erstelle App-Verzeichnisstruktur..."
        mkdir -p "$APP_PACKAGE_PATH"
        
        # App-Dateien erstellen
        touch "$APP_PACKAGE_PATH/__init__.py"
        
        cat > "$APP_PACKAGE_PATH/main.py" << 'EOF'
        import sys
        from datetime import datetime

        def main():
            print('Hallo von meiner BeeWare Android App!')
            print(f'Python Version: {sys.version}')
            print(f'Build Zeit: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
            
            # Einfache interaktive Komponente für Android
            try:
                from android.runnable import run_on_ui_thread
                print('Android-spezifische Funktionen verfügbar')
            except ImportError:
                print('Läuft im Desktop-Modus')

        if __name__ == '__main__':
            main()
        EOF

        # LICENSE erstellen
        cat > LICENSE << 'EOF'
        MIT License

        Copyright (c) $(date +%Y) Ihr Name

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        EOF

        # pyproject.toml erstellen
        cat > pyproject.toml << 'EOF'
        [build-system]
        requires = ["briefcase"]

        [project]
        name = "MyPythonApp"
        version = "1.0.0"
        description = "Eine einfache Python-App, gebaut mit BeeWare Briefcase."
        readme = "README.md"
        requires-python = ">=3.9"
        license = { file = "LICENSE" }
        authors = [
            { name = "Ihr Name", email = "ihre.email@example.com" }
        ]
        keywords = ["mobile", "android", "python", "beeware"]
        classifiers = [
            "Development Status :: 4 - Beta",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3.9",
            "Topic :: Software Development :: Libraries :: Application Frameworks",
        ]

        [tool.briefcase]
        project_name = "MyPythonApp"
        bundle = "org.example"
        author = "Ihr Name"
        author_email = "ihre.email@example.com"
        url = "https://example.com/mypythonapp"
        license = "MIT"
        requires = []

        [tool.briefcase.app.mypythonapp]
        formal_name = "My Python App"
        description = "Eine einfache Python-App für Android"
        long_description = """
        Eine Beispiel-Anwendung, die mit BeeWare Briefcase für Android erstellt wurde.
        Diese App demonstriert die grundlegende Struktur einer Python-Android-App.
        """
        sources = ["src/mypythonapp"]
        main_module = "main"
        requires = []

        [tool.briefcase.app.mypythonapp.android]
        gradle_build_gradle_dependencies = [
            "androidx.appcompat:appcompat:1.6.1",
            "androidx.constraintlayout:constraintlayout:2.1.4",
            "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0",
        ]
        permissions = [
            "android.permission.INTERNET",
        ]
        EOF

        # README erstellen
        cat > README.md << 'EOF'
        # MyPythonApp

        Eine einfache Python-Anwendung, erstellt mit BeeWare Briefcase für Android.

        ## Build-Status

        Diese App wird automatisch mit GitHub Actions gebaut.

        ## Installation

        Die APK-Datei kann aus den GitHub Actions Artifacts heruntergeladen werden.
        EOF

        echo "--- DEBUGGING-AUSGABE: Dateistruktur und Konfiguration ---"
        echo "Inhalt von pyproject.toml:"
        cat pyproject.toml
        echo ""
        echo "Dateistruktur:"
        find . -type f -name "*.py" -o -name "*.toml" -o -name "LICENSE" -o -name "README.md" | sort
        echo "--- ENDE DEBUGGING-AUSGABE ---"

        # Cleanup für sauberen Build
        echo "Bereite sauberen Build vor..."
        rm -rf ~/.briefcase build android dist

        echo "Starte Briefcase Build für Android..."
        briefcase create android
        briefcase build android

        echo "Suche nach der generierten APK-Datei..."
        APK_PATH=$(find . -name "*.apk" -type f | head -1)
        
        if [ -z "$APK_PATH" ]; then
            echo "FEHLER: APK-Datei nicht gefunden."
            echo "Verfügbare Dateien im Build-Verzeichnis:"
            find . -name "*.apk" -o -name "*.aab" -o -name "*debug*" | head -20
            exit 1
        fi
        
        echo "APK erfolgreich erstellt: $APK_PATH"
        echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
        
        # APK-Informationen anzeigen
        ls -la "$APK_PATH"
        echo "--- ENDE: Build erfolgreich ---"

    # 7. Build-Logs als Artefakt hochladen (für Debugging)
    - name: Build-Logs hochladen
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          ~/.briefcase/logs/
          android/
        retention-days: 3

    # 8. APK als Artefakt hochladen
    - name: APK-Artefakt hochladen
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: MyPythonApp-Android-APK
        path: ${{ env.APK_PATH }}
        retention-days: 30

    # 9. Release erstellen (optional, nur bei Tags)
    - name: Release erstellen
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.APK_PATH }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
