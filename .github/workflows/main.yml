name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Ermöglicht manuelles Auslösen des Workflows

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Repository auschecken
      uses: actions/checkout@v3

    - name: Python einrichten
      uses: actions/setup-python@v4
      with:
        python-version: '3.9.13'  # Exakt die Version aus buildozer.spec

    - name: System-Abhängigkeiten installieren
      run: |
        # Nur Nicht-Java/Ant-Abhängigkeiten über apt-get installieren.
        # Java, Ant, Android SDK/NDK werden durch dedizierte Schritte/Actions behandelt.
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip python3-pip \
          autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev libtinfo-dev \
          cmake libffi-dev libssl-dev patch wget

    - name: JDK für Android und Ant einrichten
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'      # Beibehalten auf Java 17, da sdkmanager dies benötigt.

    - name: Apache Ant manuell vorbereiten
      run: |
        echo "Bereite Apache Ant 1.9.4 manuell vor..."
        mkdir -p /home/runner/.buildozer/android/platform
        cd /home/runner/.buildozer/android/platform
        # Versuche verschiedene Download-URLs, falls eine fehlschlägt
        wget -q https://downloads.apache.org/ant/binaries/apache-ant-1.9.4-bin.tar.gz || \
        wget -q https://archive.apache.org/dist/ant/binaries/apache-ant-1.9.4-bin.tar.gz || \
        wget -q https://dlcdn.apache.org/ant/binaries/apache-ant-1.9.4-bin.tar.gz
        
        tar -xf apache-ant-1.9.4-bin.tar.gz
        rm apache-ant-1.9.4-bin.tar.gz
        echo "Ant-Version (sollte jetzt mit JDK funktionieren):"
        /home/runner/.buildozer/android/platform/apache-ant-1.9.4/bin/ant -version

    - name: Installiere Python-Abhängigkeiten
      run: |
        echo "Installiere Python-Abhängigkeiten..."
        python -m pip install --upgrade pip
        pip install cython==0.29.24
        pip install buildozer==1.5.0 pyjnius

    - name: Android SDK und NDK einrichten (mit spezialisierter Action)
      uses: android-actions/setup-android@v2
      with:
        api-level: 27        # Deine gewünschte API-Level
        build-tools: 30.0.3  # Deine gewünschten Build-Tools
        ndk: 25b             # Deine gewünschte NDK-Version
        # always-accept-licenses: true # <-- DIESE ZEILE ENTFERNEN ODER AUSKOMMENTIEREN

    - name: Android SDK Lizenzen explizit akzeptieren # <-- NEUER SCHRITT: Direkte Lizenzakzeptanz
      run: |
        echo "Akzeptiere Android SDK Lizenzen explizit..."
        # Verwende den sdkmanager direkt mit 'yes' Eingabe, um alle Lizenzen zu akzeptieren.
        # Wichtig: ANDROID_HOME muss hier korrekt gesetzt sein (was die setup-android Action tut).
        yes | "$ANDROID_HOME"/cmdline-tools/latest/bin/sdkmanager --licenses || true
        # Der || true am Ende stellt sicher, dass der Schritt nicht fehlschlägt, falls sdkmanager aus irgendeinem Grund einen Exit-Code ungleich 0 zurückgibt
        # (z.B. wenn alle Lizenzen bereits akzeptiert wurden).

    - name: Umgebung und Pfade debuggen (nach SDK/NDK Setup und Lizenzakzeptanz)
      run: |
        echo "--- Aktueller Umgebungs-Debug (nach SDK/NDK Setup und Lizenzakzeptanz) ---"
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Python version:"
        python --version
        echo "Buildozer version:"
        buildozer --version
        echo "Java version (should be from setup-java):"
        java -version
        echo "ANT_HOME (if set): $ANT_HOME"
        echo "PATH: $PATH"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        
        # Zusätzliche Überprüfung der SDK-Struktur und sdkmanager
        echo "Inhalt von $ANDROID_HOME/tools/bin/ :"
        ls -la "$ANDROID_HOME/tools/bin/" || echo "$ANDROID_HOME/tools/bin/ nicht gefunden."
        echo "Inhalt von $ANDROID_HOME/cmdline-tools/latest/bin/ :"
        ls -la "$ANDROID_HOME/cmdline-tools/latest/bin/" || echo "$ANDROID_HOME/cmdline-tools/latest/bin/ nicht gefunden."
        
        # Überprüfen, ob die Build-Tools wirklich da sind (nach Lizenzakzeptanz)
        echo "Inhalt von $ANDROID_HOME/build-tools/ :"
        ls -la "$ANDROID_HOME/build-tools/" || echo "$ANDROID_HOME/build-tools/ nicht gefunden."
        ls -la "$ANDROID_HOME/build-tools/30.0.3/aidl" || echo "Aidl 30.0.3 nicht gefunden."
        echo "--- Ende Umgebungs-Debug ---"

    - name: buildozer.spec für GitHub Actions anpassen (Pfade von Action nutzen)
      run: |
        echo "Passe buildozer.spec an, um Pfade von setup-android Action zu nutzen..."
        sed -i 's/^# *android.sdk = 24/android.sdk = 24/' buildozer.spec
        sed -i 's/^# *android.ndk = 25b/android.ndk = 25b/' buildozer.spec
        
        sed -i '/^android.sdk_path =/d' buildozer.spec
        sed -i '/^android.ndk_path =/d' buildozer.spec

        echo "android.sdk_path = $ANDROID_HOME" >> buildozer.spec
        echo "android.ndk_path = $ANDROID_NDK_ROOT" >> buildozer.spec

        if ! grep -q "android.add_aab_cmdline_tools = 1" buildozer.spec; then
          echo "android.add_aab_cmdline_tools = 1" >> buildozer.spec
          echo "Hinzugefügt: android.add_aab_cmdline_tools = 1"
        fi

        echo "Aktualisierter Inhalt von buildozer.spec:"
        cat buildozer.spec

    - name: APK mit Buildozer erstellen (Debug-Modus)
      run: |
        echo "Starte APK-Build mit Buildozer..."
        buildozer -v android debug

    - name: Nach APK suchen
      run: |
        echo "--- Suche nach APK im bin-Verzeichnis ---"
        ls -la bin/ || echo "bin-Verzeichnis nicht gefunden oder leer."
        echo "--- Suche rekursiv nach APK-Dateien ---"
        find . -name "*.apk" || echo "Keine APK-Dateien gefunden."

    - name: APK-Artefakt hochladen
      uses: actions/upload-artifact@v4
      if: always() # Versuche immer, Artefakte hochzuladen, auch bei Fehlern
      with:
        name: voice-cloning-app-debug
        path: |
          bin/*.apk
          .buildozer/android/platform/build-*/dists/*/build/outputs/apk/debug/*.apk
        retention-days: 7 # Optional: Anzahl der Tage, für die das Artefakt gespeichert wird
        
