# .github/workflows/main.yml

name: Android APK mit BeeWare Briefcase bauen (vereinfacht)

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Ermöglicht manuelles Starten

env:
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '17'
  BRIEFCASE_VERSION: '0.3.17'
  TOGA_VERSION: '0.4.4'
  ANDROID_API_LEVEL: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'
  ANDROID_NDK_VERSION: '25.2.9519653'

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    
    outputs:
      apk-name: ${{ steps.build-info.outputs.apk-name }}
      version: ${{ steps.build-info.outputs.version }}

    steps:
    - name: Repository auschecken
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Entwicklungsumgebung einrichten
      run: |
        # Python
        sudo apt-get update && sudo apt-get install -y python3 python3-pip
        python3 -m pip install --upgrade pip setuptools wheel
        
        # Java (Temurin)
        sudo apt-get install -y openjdk-${{ env.JAVA_VERSION }}-jdk
        
        # Android SDK (durch actions/setup-android@v3 abgedeckt, aber hier als Beispiel für manuelle Schritte)
        # Die `setup-android` Action übernimmt die meiste Arbeit hier.
        
        # Briefcase & TOML
        pip install briefcase==${{ env.BRIEFCASE_VERSION }} toml

    - name: Android SDK Komponenten installieren
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        ndk: ${{ env.ANDROID_NDK_VERSION }}
        # Lizenzen werden von dieser Action normalerweise automatisch akzeptiert
        # sdkmanager --licenses # Dies ist hier oft nicht mehr notwendig

    - name: Build-Informationen setzen
      id: build-info
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${GITHUB_REF#refs/tags/v}"
        else
          VERSION="1.0.0-${GITHUB_SHA::8}"
        fi
        APK_NAME="MyPythonApp-${VERSION}"
        echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
        echo "apk-name=${APK_NAME}" >> "$GITHUB_OUTPUT"
        echo "Building version: ${VERSION}"

    - name: App-Struktur und Konfiguration erstellen
      run: |
        set -euo pipefail

        mkdir -p src/mypythonapp
        touch src/mypythonapp/__init__.py

        cat > src/mypythonapp/app.py <<'EOF'
import toga
from toga.style import Pack
from toga.style.pack import COLUMN, ROW

class HelloWorld(toga.App):
    def startup(self):
        main_box = toga.Box(style=Pack(direction=COLUMN, padding=10))
        header_label = toga.Label(
            "🐍 BeeWare Android Demo",
            style=Pack(padding=(0, 5, 10, 5), text_align='center', font_size=18, font_weight='bold')
        )
        input_box = toga.Box(style=Pack(direction=COLUMN, padding=5))
        name_label = toga.Label("Name eingeben:", style=Pack(padding=(0, 5)))
        self.name_input = toga.TextInput(placeholder="Ihr Name...", style=Pack(padding=5, width=250))
        button_box = toga.Box(style=Pack(direction=ROW, padding=10))
        hello_button = toga.Button("👋 Begrüßung", on_press=self.say_hello, style=Pack(padding=5, flex=1))
        clear_button = toga.Button("🗑️ Löschen", on_press=self.clear_input, style=Pack(padding=5, flex=1))
        self.output_label = toga.Label("Willkommen bei der BeeWare Demo App!", style=Pack(padding=10, text_align='center', font_size=16))
        
        input_box.add(name_label, self.name_input)
        button_box.add(hello_button, clear_button)
        main_box.add(header_label, input_box, button_box, self.output_label)
        
        self.main_window = toga.MainWindow(title=self.formal_name)
        self.main_window.content = main_box
        self.main_window.show()

    def say_hello(self, widget):
        name = self.name_input.value.strip()
        if name:
            self.output_label.text = f"🎉 Hallo {name}! Schön dich zu sehen!"
        else:
            self.output_label.text = "👋 Hallo Welt! Gib deinen Namen ein für eine persönliche Begrüßung."

    def clear_input(self, widget):
        self.name_input.value = ""
        self.output_label.text = "Bereit für eine neue Eingabe! 😊"

def main():
    return HelloWorld()

if __name__ == '__main__':
    app = main()
    app.main_loop()
EOF

        cat > LICENSE <<EOF
MIT License

Copyright (c) $(date +%Y) BeeWare Demo App

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

        cat > pyproject.toml <<EOF
[build-system]
requires = ["briefcase"]
build-backend = "briefcase"

[project]
name = "MyPythonApp"
version = "${{ steps.build-info.outputs.version }}"
description = "Eine moderne Python-App für Android, gebaut mit BeeWare Briefcase"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
    { name = "BeeWare Demo", email = "demo@example.com" }
]
keywords = ["mobile", "android", "python", "beeware", "toga"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Operating System :: Android",
]

[tool.briefcase]
project_name = "MyPythonApp"
bundle = "com.example.mypythonapp"
version = "${{ steps.build-info.outputs.version }}"
author = "BeeWare Demo"
author_email = "demo@example.com"
url = "https://github.com/${{ github.repository }}"
license = "MIT"

[tool.briefcase.app.mypythonapp]
formal_name = "My Python App"
description = "BeeWare Android Demo App"
long_description = """
Eine moderne Beispiel-Anwendung, die mit BeeWare Briefcase für Android erstellt wurde.
Diese App demonstriert:
- Native Android UI mit Toga
- Python-basierte App-Entwicklung
- Automatisiertes Building mit GitHub Actions
- Moderne App-Architektur
"""
sources = ["src/mypythonapp"]
main_module = "mypythonapp.app"
requires = [
    "toga==${{ env.TOGA_VERSION }}",
]
icon = "resources/icon"
splash = "resources/splash"

[tool.briefcase.app.mypythonapp.android]
version_code = ${{ github.run_number }}
compile_sdk_version = ${{ env.ANDROID_API_LEVEL }}
target_sdk_version = ${{ env.ANDROID_API_LEVEL }}
min_sdk_version = 24
gradle_build_gradle_dependencies = [
    "androidx.appcompat:appcompat:1.6.1",
    "androidx.constraintlayout:constraintlayout:2.1.4",
    "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0",
    "androidx.core:core-ktx:1.12.0",
    "com.google.android.material:material:1.11.0",
]
permissions = [
    "android.permission.INTERNET",
]

[tool.briefcase.app.mypythonapp.android.gradle_template_context]
app_name = "My Python App"
package_name = "com.example.mypythonapp"
EOF

        cat > README.md <<EOF
# 🐍 MyPythonApp

Eine moderne Python-Anwendung für Android, erstellt mit BeeWare Briefcase.

![Build Status](https://github.com/${{ github.repository }}/workflows/Android%20APK%20mit%20BeeWare%20Briefcase%20bauen/badge.svg)

## 📱 Features

- Native Android UI mit Python
- Moderne Material Design Elemente
- Automatisierte CI/CD Pipeline
- Cross-Platform Entwicklung

## 🚀 Installation

Die neueste APK kann aus den [GitHub Releases](https://github.com/${{ github.repository }}/releases) heruntergeladen werden.

## 🛠️ Entwicklung

Diese App verwendet:
- **Python ${{ env.PYTHON_VERSION }}**
- **BeeWare Briefcase ${{ env.BRIEFCASE_VERSION }}**
- **Toga ${{ env.TOGA_VERSION }}**
- **Android API Level ${{ env.ANDROID_API_LEVEL }}**

## 📦 Build

Das Projekt wird automatisch mit GitHub Actions gebaut bei jedem Push und Pull Request.

### Lokaler Build

\`\`\`bash
pip install briefcase==${{ env.BRIEFCASE_VERSION }}
briefcase create android
briefcase build android
briefcase package android
\`\`\`

## 📄 Lizenz

MIT License - siehe [LICENSE](LICENSE) für Details.
EOF

    - name: Briefcase Cache einrichten
      uses: actions/cache@v4
      with:
        path: |
          ~/.briefcase
          ~/.gradle/caches
          ~/.android/build-cache
        key: briefcase-${{ runner.os }}-${{ env.BRIEFCASE_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          briefcase-${{ runner.os }}-${{ env.BRIEFCASE_VERSION }}-
          briefcase-${{ runner.os }}-

    - name: Konfiguration validieren
      run: |
        python -c "
import toml
import sys

try:
    with open('pyproject.toml', 'r', encoding='utf-8') as f:
        config = toml.load(f)
    print('✅ pyproject.toml ist gültig')
    print(f'📦 Projekt: {config['project']['name']} v{config['project']['version']}')
    print(f'📱 Bundle ID: {config['tool']['briefcase']['bundle']}')
except Exception as e:
    print(f'❌ Fehler in pyproject.toml: {e}')
    sys.exit(1)
"

    - name: Android APK erstellen
      run: |
        set -euo pipefail

        echo "🏗️ Starte Briefcase Build-Prozess..."

        rm -rf ~/.briefcase/projects/*/android/
        rm -rf build/ dist/ android/

        echo "📱 Erstelle Android Projekt..."
        briefcase create android --no-input -v

        echo "🔨 Baue Android APK..."
        briefcase build android --no-input -v

        echo "📦 Erstelle APK Package..."
        briefcase package android --adhoc-sign --no-input -v

    - name: APK lokalisieren und aufbereiten
      id: locate-apk
      run: |
        set -euo pipefail
        
        echo "🔍 Suche APK-Dateien..."
        APK_PATH=$(find . -name "*.apk" -type f | head -1)
        
        if [ -z "$APK_PATH" ]; then
          echo "❌ Keine APK-Datei gefunden!"
          find . -type f -name "*.*" | grep -E "\.(apk|aab)$" || echo "Keine APK/AAB Dateien gefunden"
          exit 1
        fi
        
        APK_SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH")
        APK_SIZE_MB=$((APK_SIZE / 1024 / 1024))
        
        echo "✅ APK gefunden:"
        echo "📁 Pfad: $APK_PATH"
        echo "📏 Größe: ${APK_SIZE_MB}MB"
        
        mkdir -p artifacts
        FINAL_APK_NAME="${{ steps.build-info.outputs.apk-name }}.apk"
        cp "$APK_PATH" "artifacts/$FINAL_APK_NAME"
        
        echo "apk-path=artifacts/$FINAL_APK_NAME" >> "$GITHUB_OUTPUT"
        echo "apk-size-mb=$APK_SIZE_MB" >> "$GITHUB_OUTPUT"
        
        echo "🎉 APK erfolgreich vorbereitet: artifacts/$FINAL_APK_NAME"

    - name: APK-Artefakt hochladen
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build-info.outputs.apk-name }}-Android-APK
        path: artifacts/
        retention-days: 30
        compression-level: 1

    - name: Build-Logs bei Fehlern hochladen
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          ~/.briefcase/logs/
          android/*/build/outputs/logs/
          build/
        retention-days: 7

    - name: GitHub Release erstellen
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*.apk
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 📱 Android APK Release
          
          **Version:** ${{ steps.build-info.outputs.version }}
          **APK-Größe:** ${{ steps.locate-apk.outputs.apk-size-mb }}MB
          **Build:** #${{ github.run_number }}
          
          ### 🚀 Installation
          
          1. APK-Datei herunterladen
          2. "Unbekannte Quellen" in Android-Einstellungen aktivieren
          3. APK installieren
          
          ### 🛠️ Build-Informationen
          
          - Python ${{ env.PYTHON_VERSION }}
          - BeeWare Briefcase ${{ env.BRIEFCASE_VERSION }}
          - Toga ${{ env.TOGA_VERSION }}
          - Android API Level ${{ env.ANDROID_API_LEVEL }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build-Zusammenfassung
      run: |
        echo "## 🎉 Build erfolgreich abgeschlossen!" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "**Version:** ${{ steps.build-info.outputs.version }}" >> "$GITHUB_STEP_SUMMARY"
        echo "**APK-Name:** ${{ steps.build-info.outputs.apk-name }}" >> "$GITHUB_STEP_SUMMARY"
        echo "**APK-Größe:** ${{ steps.locate-apk.outputs.apk-size-mb }}MB" >> "$GITHUB_STEP_SUMMARY"
        echo "**Build-Nummer:** #${{ github.run_number }}" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "### 📦 Artefakte" >> "$GITHUB_STEP_SUMMARY"
        echo "- Android APK verfügbar in den Workflow-Artefakten" >> "$GITHUB_STEP_SUMMARY"
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "- Release wurde automatisch erstellt" >> "$GITHUB_STEP_SUMMARY"
        fi
