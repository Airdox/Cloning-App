name: Build Android APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Annahme: Lädt deinen Code nach $GITHUB_WORKSPACE/Cloning-App/
        # $GITHUB_WORKSPACE ist /home/runner/work/Cloning-App

      - name: List files in workspace for diagnosis
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "Listing files in GITHUB_WORKSPACE ($GITHUB_WORKSPACE):"
          ls -R $GITHUB_WORKSPACE
          echo "Listing files in GITHUB_WORKSPACE/Cloning-App ($GITHUB_WORKSPACE/Cloning-App):"
          ls -R $GITHUB_WORKSPACE/Cloning-App || echo "Directory $GITHUB_WORKSPACE/Cloning-App does not exist or is empty"

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
          # Pfade sind relativ zum GITHUB_WORKSPACE.
          # Wenn deine Dateien in $GITHUB_WORKSPACE/Cloning-App/ liegen:
          cache-dependency-path: |
            Cloning-App/**/*.gradle*
            Cloning-App/**/gradle-wrapper.properties
            Cloning-App/**/gradle/libs.versions.toml
            Cloning-App/**/versions.properties

      - name: Grant execute permission for gradlew
        # Das Arbeitsverzeichnis muss auf das Verzeichnis zeigen, das `gradlew` enthält
        working-directory: ${{ github.workspace }}/Cloning-App
        run: chmod +x ./gradlew

      - name: Build debug APK
        working-directory: ${{ github.workspace }}/Cloning-App
        run: ./gradlew assembleDebug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloning-app-debug-apk
          # Pfad ist relativ zum GITHUB_WORKSPACE
          path: ${{ github.workspace }}/Cloning-App/app/build/outputs/apk/debug/app-debug.apk
