# .github/workflows/main.yml

name: Build und Bereitstellung # Klarer, beschreibender Name fÃ¼r deinen Workflow

on:
  push:
    branches:
      - main # LÃ¶st den Workflow bei Pushs auf den 'main'-Branch aus
  pull_request:
    branches:
      - main # LÃ¶st den Workflow bei Pull Requests aus, die auf den 'main'-Branch abzielen

jobs:
  build: # Definiere einen Job namens 'build'
    runs-on: ubuntu-latest # Gib die Runner-Umgebung an (Ubuntu ist Ã¼blich fÃ¼r Builds)

    # Umgebungsvariablen, die allen Schritten in diesem Job zur VerfÃ¼gung stehen.
    # Der GITHUB_TOKEN ist fÃ¼r viele GitHub Actions-Funktionen unerlÃ¤sslich.
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Code auschecken # Schritt zum Abrufen des Repository-Codes
        uses: actions/checkout@v4 # Verwendet die offizielle GitHub Action zum Auschecken von Code

      # Dieser Schritt simuliert das Setzen von Umgebungsvariablen wie TOGA_VERSION und ANDROID_API_LEVEL.
      # Ersetze dies durch deine tatsÃ¤chliche Logik, um diese Werte zu bestimmen oder zu setzen.
      - name: Build-Umgebungsvariablen setzen
        id: set-build-vars
        run: |
          echo "TOGA_VERSION=0.13.0" >> "$GITHUB_ENV" # Beispiel Toga-Version
          echo "ANDROID_API_LEVEL=33" >> "$GITHUB_ENV" # Beispiel Android API Level

      # Platzhalter-Schritt: Ersetze dies durch deinen tatsÃ¤chlichen Build-Befehl (z.B. Python, Android Gradle Build).
      # Dieser Schritt sollte auch die 'version' und 'apk-name' ausgeben, die der Zusammenfassungs-Schritt verwenden wird.
      - name: Anwendungssimulation bauen
        id: build-app
        run: |
          echo "--- Hier laufen deine tatsÃ¤chlichen Build-Befehle ---"
          # Beispiel fÃ¼r das Setzen von Ausgaben, die von nachfolgenden Schritten verwendet werden
          echo "version=1.0.0" >> "$GITHUB_OUTPUT"
          echo "apk-name=DeineApp-Release-1.0.0.apk" >> "$GITHUB_OUTPUT"

      # Platzhalter-Schritt: Ersetze dies durch deine tatsÃ¤chliche Logik, um die gebaute APK zu finden und ihre GrÃ¶ÃŸe zu ermitteln.
      - name: APK finden und GrÃ¶ÃŸe ermitteln
        id: locate-apk
        run: |
          echo "--- APK wird gesucht und GrÃ¶ÃŸe berechnet ---"
          # Beispiel fÃ¼r das Setzen einer Ausgabe fÃ¼r die APK-GrÃ¶ÃŸe
          echo "apk-size-mb=12.5" >> "$GITHUB_OUTPUT"

      - name: Build-Zusammenfassung # Dein ursprÃ¼nglicher Schritt zur Zusammenfassung des Builds
        # Dieser Schritt verwendet 'run', um Shell-Befehle auszufÃ¼hren.
        # Er fÃ¼gt die Build-Informationen der GitHub Actions Schrittzusammenfassung hinzu.
        run: |
          echo "## ðŸŽ‰ Build erfolgreich abgeschlossen!" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Toga:** ${{ env.TOGA_VERSION }}" >> "$GITHUB_STEP_SUMMARY" # Verwende env fÃ¼r zuvor gesetzte Variablen
          echo "**Android API Level:** ${{ env.ANDROID_API_LEVEL }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Version:** ${{ steps.build-app.outputs.version }}" >> "$GITHUB_STEP_SUMMARY" # Ausgabe vom Schritt 'build-app'
          echo "**APK-Name:** ${{ steps.build-app.outputs.apk-name }}" >> "$GITHUB_STEP_SUMMARY" # Ausgabe vom Schritt 'build-app'
          echo "**APK-GrÃ¶ÃŸe:** ${{ steps.locate-apk.outputs.apk-size-mb }}MB" >> "$GITHUB_STEP_SUMMARY" # Ausgabe vom Schritt 'locate-apk'
          echo "**Build-Nummer:** #${{ github.run_number }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
