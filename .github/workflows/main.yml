# Name des Workflows, der in der GitHub Actions-Oberfläche angezeigt wird
name: Build Flutter Android APK

# Legt fest, wann dieser Workflow ausgeführt wird
on:
  push:
    branches:
      - main
  workflow_dispatch:

# Definiert die Aufgaben (Jobs), die im Workflow ausgeführt werden
jobs:
  build:
    # Der Typ des Runners, auf dem der Job ausgeführt wird
    runs-on: ubuntu-latest

    # NEU: Setzt ein Standard-Arbeitsverzeichnis für alle 'run'-Schritte in diesem Job.
    # Alle Befehle werden nun standardmäßig im Flutter-Projektordner ausgeführt.
    defaults:
      run:
        working-directory: ./cloning_app

    # Die einzelnen Schritte des Jobs
    steps:
      # Schritt 1: Das Repository auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # NEUER DEBUGGING-SCHRITT: Zeigt die genaue Verzeichnisstruktur im Log an.
      # Wir führen dies im Stammverzeichnis aus, um alles zu sehen.
      - name: List files in the repository
        run: ls -R
        working-directory: .

      # Schritt 2: Flutter SDK einrichten
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x' 
          channel: 'stable'
          cache: true

      # Schritt 3: Flutter-Abhängigkeiten installieren
      # Das Arbeitsverzeichnis wird von den 'defaults' oben übernommen.
      - name: Install dependencies
        run: flutter pub get

      # Schritt 4: Die Android APK erstellen
      # Auch hier wird das Arbeitsverzeichnis von den 'defaults' übernommen.
      - name: Build APK
        run: flutter build apk --release

      # Schritt 5: Die erstellte APK als Artefakt hochladen
      # Der Pfad zum Artefakt muss weiterhin relativ zum Stammverzeichnis angegeben werden.
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: cloning_app/build/app/outputs/flutter-apk/app-release.apk

