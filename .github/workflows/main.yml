# Name des Workflows
name: Build Android APK with BeeWare Briefcase

# Trigger für den Workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    # Der Job läuft auf der neuesten Ubuntu-Version
    runs-on: ubuntu-latest

    steps:
    # 1. Repository auschecken
    - name: Repository auschecken
      uses: actions/checkout@v4

    # 2. Python-Umgebung einrichten
    - name: Python einrichten
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Oder Ihre bevorzugte Python-Version

    # 3. Java Development Kit (JDK) einrichten (für Android SDK, von Briefcase benötigt)
    - name: Java JDK einrichten (für Android SDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # 4. Briefcase installieren
    - name: Briefcase installieren
      run: |
        # Beende den Schritt sofort, wenn ein Befehl fehlschlägt
        set -e
        echo "Aktualisiere pip und installiere briefcase..."
        python -m pip install --upgrade pip
        pip install briefcase
        echo "Briefcase-Installation abgeschlossen."

    # 5. Bereite App-Struktur vor und erstelle die Android APK
    - name: Bereite App-Struktur vor und erstelle die Android APK
      run: |
        # Beende den Schritt sofort, wenn ein Befehl fehlschlägt
        set -e
        
        echo "--- START: Vorbereitung der App-Struktur und pyproject.toml ---"
        echo "Aktuelles Arbeitsverzeichnis: $(pwd)"
        echo "Benutzer: $(whoami)"

        # Definiere den Namen des Python-Paket-Ordners basierend auf dem App-Namen
        APP_PACKAGE_DIR="mypythonapp" 
        
        # 1. Erstelle die pyproject.toml-Datei zuerst, um sicherzustellen, dass sie immer aktuell ist.
        echo "Generiere pyproject.toml mit aktualisierten Inhalten..."
        cat <<EOF > pyproject.toml
        [project]
        name = "MyPythonApp"
        version = "1.0.0"
        description = "Eine einfache Python-App, gebaut mit BeeWare Briefcase."
        requires-python = ">=3.9"
        # KORREKTUR: Lizenzdefinition nach PEP 621. Dies sollte die Warnung beheben.
        license = { file = "LICENSE" } # Verweist auf die LICENSE-Datei im Root

        [tool.briefcase]
        project_name = "MyPythonApp"
        bundle = "org.example" # Ihre eindeutige Paket-ID (z.B. com.ihrefirma)
        author = "Ihr Name"
        author_email = "ihre.email@example.com"
        url = "https://example.com/mypythonapp"
        requires = [] # Fügen Sie hier Ihre Python-Abhängigkeiten hinzu (z.B. ["kivy", "requests"])

        [tool.briefcase.app.mypythonapp] # Der Name hier muss dem 'project.name' entsprechen (kleingeschrieben und Bindestriche statt Leerzeichen)
        sources = ["."] # sources zeigt auf das Verzeichnis, das das App-Paket enthält (hier: Root)
        # KORREKTUR: main_module ist der NAME DES PAKETS (z.B. "mypythonapp"), nicht der Dateiname "main".
        main_module = "mypythonapp" 
        long_description = "Eine ausführlichere Beschreibung Ihrer Anwendung."
        
        [tool.briefcase.app.mypythonapp.android]
        target_device = "generic"
        sdk_version = "34" 
        min_sdk_version = "21"
        build_tools_version = "34.0.0"
        supported_abis = ["arm64-v8a"]
        permissions = []
        EOF
        echo "pyproject.toml wurde generiert."

        # 2. Erstelle das Python-Paket-Verzeichnis und seine Inhalte
        echo "Erstelle Paketverzeichnis: $APP_PACKAGE_DIR"
        mkdir -p "$APP_PACKAGE_DIR" || { echo "FEHLER: Konnte Verzeichnis $APP_PACKAGE_DIR nicht erstellen."; exit 1; }
        
        echo "Erstelle __init__.py in $APP_PACKAGE_DIR/__init__.py"
        if [ ! -f "$APP_PACKAGE_DIR/__init__.py" ]; then
            touch "$APP_PACKAGE_DIR/__init__.py" || { echo "FEHLER: Konnte __init__.py nicht erstellen."; exit 1; }
        fi
        
        echo "Erstelle main.py in $APP_PACKAGE_DIR/main.py"
        if [ ! -f "$APP_PACKAGE_DIR/main.py" ]; then
            echo "print('Hallo von meiner BeeWare Android App!')" > "$APP_PACKAGE_DIR/main.py" || { echo "FEHLER: Konnte main.py nicht erstellen."; exit 1; }
        fi

        # 3. Optional: Erstelle eine leere LICENSE-Datei, wenn nicht vorhanden,
        # um die Lizenzwarnung zu vermeiden.
        echo "Erstelle/prüfe LICENSE-Datei..."
        if [ ! -f LICENSE ]; then
            echo "Copyright (c) $(date +%Y) Ihr Name" > LICENSE
            echo "" >> LICENSE
            echo "MIT License" >> LICENSE
            echo "" >> LICENSE
            echo "Permission is hereby granted, free of charge, to any person obtaining a copy" >> LICENSE
            echo "of this software and associated documentation files (the \"Software\"), to deal" >> LICENSE
            echo "in the Software without restriction, including without limitation the rights" >> LICENSE
            echo "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" >> LICENSE
            echo "copies of the Software, and to permit persons to whom the Software is" >> LICENSE
            echo "furnished to do so, subject to the following conditions:" >> LICENSE
            echo "" >> LICENSE
            echo "The above copyright notice and this permission notice shall be included in all" >> LICENSE
            echo "copies or substantial portions of the Software." >> LICENSE
            echo "" >> LICENSE
            echo "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR" >> LICENSE
            echo "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," >> LICENSE
            echo "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE" >> LICENSE
            echo "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER" >> LICENSE
            echo "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," >> LICENSE
            echo "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE" >> LICENSE
            echo "SOFTWARE." >> LICENSE
            echo "LICENSE-Datei wurde erstellt."
        else
            echo "LICENSE-Datei existiert bereits."
        fi

        echo "--- DEBUGGING-AUSGABE: Dateistruktur und pyproject.toml Inhalt ---"
        echo "Inhalt von pyproject.toml:"
        cat pyproject.toml
        echo "Dateistruktur im aktuellen Verzeichnis:"
        ls -F
        echo "Rekursive Dateistruktur ab dem aktuellen Verzeichnis:"
        ls -R
        echo "--- ENDE DEBUGGING-AUSGABE ---"

        echo "Starte den Briefcase-Build für Android mit verbose-Modus..."
        # Briefcase build android wird bei Bedarf automatisch briefcase create und SDK-Installationen verwalten.
        briefcase build android --verbose # Oder -vv für noch mehr Details

        echo "Suche nach der generierten APK-Datei..."
        APK_PATH=$(find android -name "*.apk" -print -quit) # -quit beendet nach dem ersten Fund
        
        if [ -z "$APK_PATH" ]; then
            echo "FEHLER: APK-Datei nicht gefunden. Überprüfen Sie die Briefcase-Ausgabe auf Fehler."
            exit 1
        fi
        echo "APK erfolgreich erstellt unter: $APK_PATH"
        echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV # Setzt die Umgebungsvariable für den Upload
        echo "--- ENDE: Vorbereitung und Build ---"

    # 6. Erstelltes APK als Artefakt hochladen
    - name: APK-Artefakt hochladen
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: App-Debug-APK
        path: ${{ env.APK_PATH }} # Verwendet den dynamisch gefundenen Pfad
        retention-days: 7
        
