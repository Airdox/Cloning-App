# .github/workflows/main.yml

name: Android APK mit BeeWare Briefcase bauen # Klarer, beschreibender Name f√ºr den Workflow

on:
  push:
    branches: [ main, develop ] # L√∂st den Workflow bei Pushs auf 'main' und 'develop' aus
    tags: [ 'v*' ] # L√∂st den Workflow auch bei Tags aus, die mit 'v' beginnen (z.B. v1.0.0)
  pull_request:
    branches: [ main ] # L√∂st den Workflow bei Pull Requests auf 'main' aus
  workflow_dispatch: # Erm√∂glicht das manuelle Starten des Workflows √ºber die GitHub UI

env:
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '17'
  BRIEFCASE_VERSION: '0.3.17'
  TOGA_VERSION: '0.4.4'
  ANDROID_API_LEVEL: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'
  ANDROID_NDK_VERSION: '25.2.9519653'

jobs:
  build: # Definition des Jobs 'build'
    runs-on: ubuntu-22.04 # Die Runner-Umgebung
    timeout-minutes: 60 # Maximal erlaubte Laufzeit f√ºr den Job

    outputs: # Ausgaben des Jobs, die von anderen Jobs verwendet werden k√∂nnen
      apk-name: ${{ steps.build-info.outputs.apk-name }}
      version: ${{ steps.build-info.outputs.version }}

    steps:
    - name: Repository auschecken # Schritt zum Klonen des Repositories
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Holt den gesamten Verlauf, wichtig f√ºr Tags und genaue Versionen

    - name: Python einrichten # Schritt zur Konfiguration der Python-Umgebung
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip' # Aktiviert Caching f√ºr pip-Abh√§ngigkeiten

    - name: Java JDK einrichten # Schritt zur Konfiguration des Java Development Kits
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Android SDK einrichten # Schritt zur Konfiguration des Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        ndk: ${{ env.ANDROID_NDK_VERSION }}

    - name: Android SDK Komponenten installieren # Schritt zur Installation spezifischer SDK-Komponenten
      run: |
        sdkmanager --install "platforms;android-${{ env.ANDROID_API_LEVEL }}"
        sdkmanager --install "build-tools;${{ env.ANDROID_BUILD_TOOLS }}"
        sdkmanager --install "ndk;${{ env.ANDROID_NDK_VERSION }}"
        yes | sdkmanager --licenses # Lizenzen automatisch akzeptieren

    - name: Build-Dependencies installieren # Schritt zur Installation der Python-Build-Abh√§ngigkeiten
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install briefcase==${{ env.BRIEFCASE_VERSION }} toml

    - name: Build-Informationen setzen # Schritt zum Ermitteln der Version und des APK-Namens
      id: build-info # ID f√ºr den Zugriff auf die Ausgaben dieses Schritts
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then # Pr√ºfen, ob es sich um einen Tag-Build handelt
          VERSION="${GITHUB_REF#refs/tags/v}"
        else
          VERSION="1.0.0-${GITHUB_SHA::8}" # Standardversion f√ºr Nicht-Tag-Builds
        fi
        APK_NAME="MyPythonApp-${VERSION}"
        echo "version=${VERSION}" >> "$GITHUB_OUTPUT" # Setze 'version' als Schritt-Output
        echo "apk-name=${APK_NAME}" >> "$GITHUB_OUTPUT" # Setze 'apk-name' als Schritt-Output
        echo "Building version: ${VERSION}"

    - name: App-Struktur und Konfiguration erstellen # Schritt zum Generieren der App-Dateien und Konfigurationen
      run: |
        set -euo pipefail # Beende bei Fehlern oder ungesetzten Variablen

        # Verzeichnisstruktur erstellen
        mkdir -p src/mypythonapp
        touch src/mypythonapp/__init__.py

        # Hauptanwendung (app.py) erstellen - Einr√ºckung korrigiert!
        cat > src/mypythonapp/app.py <<'EOF'
import toga
from toga.style import Pack
from toga.style.pack import COLUMN, ROW

class HelloWorld(toga.App):
    def startup(self):
        """App-Initialisierung"""
        main_box = toga.Box(style=Pack(direction=COLUMN, padding=10))

        # Header
        header_label = toga.Label(
            "üêç BeeWare Android Demo",
            style=Pack(
                padding=(0, 5, 10, 5),
                text_align='center',
                font_size=18,
                font_weight='bold'
            )
        )

        # Input-Bereich
        input_box = toga.Box(style=Pack(direction=COLUMN, padding=5))
        name_label = toga.Label("Name eingeben:", style=Pack(padding=(0, 5)))
        self.name_input = toga.TextInput(
            placeholder="Ihr Name...",
            style=Pack(padding=5, width=250)
        )

        # Button-Bereich
        button_box = toga.Box(style=Pack(direction=ROW, padding=10))
        hello_button = toga.Button(
            "üëã Begr√º√üung",
            on_press=self.say_hello,
            style=Pack(padding=5, flex=1)
        )
        clear_button = toga.Button(
            "üóëÔ∏è L√∂schen",
            on_press=self.clear_input,
            style=Pack(padding=5, flex=1)
        )

        # Ausgabe-Bereich
        self.output_label = toga.Label(
            "Willkommen bei der BeeWare Demo App!",
            style=Pack(
                padding=10,
                text_align='center',
                font_size=16
            )
        )

        # Layout zusammenbauen
        input_box.add(name_label)
        input_box.add(self.name_input)

        button_box.add(hello_button)
        button_box.add(clear_button)

        main_box.add(header_label)
        main_box.add(input_box)
        main_box.add(button_box)
        main_box.add(self.output_label)

        # Hauptfenster konfigurieren
        self.main_window = toga.MainWindow(title=self.formal_name)
        self.main_window.content = main_box
        self.main_window.show()

    def say_hello(self, widget):
        """Begr√º√üung anzeigen"""
        name = self.name_input.value.strip()
        if name:
            self.output_label.text = f"üéâ Hallo {name}! Sch√∂n dich zu sehen!"
        else:
            self.output_label.text = "üëã Hallo Welt! Gib deinen Namen ein f√ºr eine pers√∂nliche Begr√º√üung."

    def clear_input(self, widget):
        """Input und Output zur√ºcksetzen"""
        self.name_input.value = ""
        self.output_label.text = "Bereit f√ºr eine neue Eingabe! üòä"

def main():
    return HelloWorld()

if __name__ == '__main__':
    app = main()
    app.main_loop()
EOF

        # Lizenz erstellen - Einr√ºckung korrigiert!
        cat > LICENSE <<EOF
MIT License

Copyright (c) $(date +%Y) BeeWare Demo App

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

        # Projekt-Konfiguration (pyproject.toml) erstellen - Einr√ºckung korrigiert!
        cat > pyproject.toml <<EOF
[build-system]
requires = ["briefcase"]
build-backend = "briefcase"

[project]
name = "MyPythonApp"
version = "${{ steps.build-info.outputs.version }}"
description = "Eine moderne Python-App f√ºr Android, gebaut mit BeeWare Briefcase"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
    { name = "BeeWare Demo", email = "demo@example.com" }
]
keywords = ["mobile", "android", "python", "beeware", "toga"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Operating System :: Android",
]

[tool.briefcase]
project_name = "MyPythonApp"
bundle = "com.example.mypythonapp"
version = "${{ steps.build-info.outputs.version }}"
author = "BeeWare Demo"
author_email = "demo@example.com"
url = "https://github.com/${{ github.repository }}" # Korrigiert: Verwende github.repository
license = "MIT"

[tool.briefcase.app.mypythonapp]
formal_name = "My Python App"
description = "BeeWare Android Demo App"
long_description = """
Eine moderne Beispiel-Anwendung, die mit BeeWare Briefcase f√ºr Android erstellt wurde.
Diese App demonstriert:
- Native Android UI mit Toga
- Python-basierte App-Entwicklung
- Automatisiertes Building mit GitHub Actions
- Moderne App-Architektur
"""
sources = ["src/mypythonapp"]
main_module = "mypythonapp.app"
requires = [
    "toga==${{ env.TOGA_VERSION }}",
]
icon = "resources/icon"
splash = "resources/splash"

[tool.briefcase.app.mypythonapp.android]
version_code = ${{ github.run_number }}
compile_sdk_version = ${{ env.ANDROID_API_LEVEL }}
target_sdk_version = ${{ env.ANDROID_API_LEVEL }}
min_sdk_version = 24
gradle_build_gradle_dependencies = [
    "androidx.appcompat:appcompat:1.6.1",
    "androidx.constraintlayout:constraintlayout:2.1.4",
    "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0",
    "androidx.core:core-ktx:1.12.0",
    "com.google.android.material:material:1.11.0",
]
permissions = [
    "android.permission.INTERNET",
]

# Gradle-Template Kontext f√ºr erweiterte Konfiguration
[tool.briefcase.app.mypythonapp.android.gradle_template_context]
app_name = "My Python App"
package_name = "com.example.mypythonapp"
EOF

        # README erstellen - Einr√ºckung korrigiert!
        cat > README.md <<EOF
# üêç MyPythonApp

Eine moderne Python-Anwendung f√ºr Android, erstellt mit BeeWare Briefcase.

![Build Status](https://github.com/${{ github.repository }}/workflows/Android%20APK%20mit%20BeeWare%20Briefcase%20bauen/badge.svg)

## üì± Features

- Native Android UI mit Python
- Moderne Material Design Elemente
- Automatisierte CI/CD Pipeline
- Cross-Platform Entwicklung

## üöÄ Installation

Die neueste APK kann aus den [GitHub Releases](https://github.com/${{ github.repository }}/releases) heruntergeladen werden.

## üõ†Ô∏è Entwicklung

Diese App verwendet:
- **Python ${{ env.PYTHON_VERSION }}**
- **BeeWare Briefcase ${{ env.BRIEFCASE_VERSION }}**
- **Toga ${{ env.TOGA_VERSION }}**
- **Android API Level ${{ env.ANDROID_API_LEVEL }}**

## üì¶ Build

Das Projekt wird automatisch mit GitHub Actions gebaut bei jedem Push und Pull Request.

### Lokaler Build

\`\`\`bash
pip install briefcase==${{ env.BRIEFCASE_VERSION }}
briefcase create android
briefcase build android
briefcase package android
\`\`\`

## üìÑ Lizenz

MIT License - siehe [LICENSE](LICENSE) f√ºr Details.
EOF

    - name: Briefcase Cache einrichten # Schritt zum Caching von Briefcase-Abh√§ngigkeiten
      uses: actions/cache@v4
      with:
        path: |
          ~/.briefcase
          ~/.gradle/caches
          ~/.android/build-cache
        key: briefcase-${{ runner.os }}-${{ env.BRIEFCASE_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          briefcase-${{ runner.os }}-${{ env.BRIEFCASE_VERSION }}-
          briefcase-${{ runner.os }}-

    - name: Konfiguration validieren # Schritt zur √úberpr√ºfung der pyproject.toml-Datei
      run: |
        python -c "
import toml
import sys

try:
    with open('pyproject.toml', 'r', encoding='utf-8') as f:
        config = toml.load(f)
    print('‚úÖ pyproject.toml ist g√ºltig')
    print(f'üì¶ Projekt: {config['project']['name']} v{config['project']['version']}')
    print(f'üì± Bundle ID: {config['tool']['briefcase']['bundle']}')
except Exception as e:
    print(f'‚ùå Fehler in pyproject.toml: {e}')
    sys.exit(1)
"

    - name: Android APK erstellen # Schritt zum Erstellen der Android APK mit Briefcase
      run: |
        set -euo pipefail

        echo "üèóÔ∏è Starte Briefcase Build-Prozess..."

        # Vorherige Builds bereinigen
        rm -rf ~/.briefcase/projects/*/android/
        rm -rf build/ dist/ android/

        # Briefcase Schritte mit detailliertem Logging
        echo "üì± Erstelle Android Projekt..."
        briefcase create android --no-input -v

        echo "üî® Baue Android APK..."
        briefcase build android --no-input -v

        echo "üì¶ Erstelle APK Package..."
        briefcase package android --adhoc-sign --no-input -v

    - name: APK lokalisieren und aufbereiten # Schritt zum Auffinden und Vorbereiten der generierten APK
      id: locate-apk # ID f√ºr den Zugriff auf die Ausgaben dieses Schritts
      run: |
        set -euo pipefail

        # APK-Dateien finden
        echo "üîç Suche APK-Dateien..."
        find . -name "*.apk" -type f -exec ls -la {} \;

        # Prim√§re APK finden (nimmt die erste gefundene APK)
        APK_PATH=$(find . -name "*.apk" -type f | head -1)

        if [ -z "$APK_PATH" ]; then
          echo "‚ùå Keine APK-Datei gefunden!"
          echo "Verf√ºgbare Dateien:"
          find . -type f -name "*.*" | grep -E "\.(apk|aab)$" || echo "Keine APK/AAB Dateien gefunden"
          exit 1
        fi

        # APK-Informationen abrufen
        APK_SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH")
        APK_SIZE_MB=$((APK_SIZE / 1024 / 1024))

        echo "‚úÖ APK gefunden:"
        echo "üìÅ Pfad: $APK_PATH"
        echo "üìè Gr√∂√üe: ${APK_SIZE_MB}MB"

        # Ausgabe-Verzeichnis vorbereiten
        mkdir -p artifacts

        # APK mit aussagekr√§ftigem Namen kopieren
        FINAL_APK_NAME="${{ steps.build-info.outputs.apk-name }}.apk" # Dateiname basierend auf Build-Info
        cp "$APK_PATH" "artifacts/$FINAL_APK_NAME"

        # Ausgaben f√ºr weitere Steps festlegen
        echo "apk-path=artifacts/$FINAL_APK_NAME" >> "$GITHUB_OUTPUT"
        echo "apk-size-mb=$APK_SIZE_MB" >> "$GITHUB_OUTPUT"

        echo "üéâ APK erfolgreich vorbereitet: artifacts/$FINAL_APK_NAME"

    - name: APK-Artefakt hochladen # Schritt zum Hochladen der APK als Workflow-Artefakt
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build-info.outputs.apk-name }}-Android-APK
        path: artifacts/
        retention-days: 30 # Artefakt f√ºr 30 Tage aufbewahren
        compression-level: 1 # Kompressionsstufe

    - name: Build-Logs bei Fehlern hochladen # Schritt zum Hochladen von Logs, falls der Build fehlschl√§gt
      uses: actions/upload-artifact@v4
      if: failure() # Nur ausf√ºhren, wenn der Job fehlschl√§gt
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          ~/.briefcase/logs/
          android/*/build/outputs/logs/
          build/
        retention-days: 7

    - name: GitHub Release erstellen # Schritt zum Erstellen eines GitHub Releases bei Tag-Pushs
      if: startsWith(github.ref, 'refs/tags/v') # Nur ausf√ºhren, wenn der Push ein Tag ist, der mit 'v' beginnt
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*.apk # Die erstellte APK an das Release anh√§ngen
        draft: false # Release ist kein Entwurf
        prerelease: false # Release ist kein Prerelease
        generate_release_notes: true # Automatisch Release-Notizen generieren
        body: | # Inhalt der Release-Beschreibung
          ## üì± Android APK Release

          **Version:** ${{ steps.build-info.outputs.version }}
          **APK-Gr√∂√üe:** ${{ steps.locate-apk.outputs.apk-size-mb }}MB
          **Build:** #${{ github.run_number }}

          ### üöÄ Installation

          1. APK-Datei herunterladen
          2. "Unbekannte Quellen" in Android-Einstellungen aktivieren
          3. APK installieren

          ### üõ†Ô∏è Build-Informationen

          - Python ${{ env.PYTHON_VERSION }}
          - BeeWare Briefcase ${{ env.BRIEFCASE_VERSION }}
          - Toga ${{ env.TOGA_VERSION }}
          - Android API Level ${{ env.ANDROID_API_LEVEL }}
      env: # Umgebungsvariablen speziell f√ºr diesen Release-Schritt
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ben√∂tigt, um auf die GitHub API zuzugreifen

    - name: Build-Zusammenfassung # Schritt zur Anzeige einer Zusammenfassung des Builds
      run: |
        echo "## üéâ Build erfolgreich abgeschlossen!" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "**Version:** ${{ steps.build-info.outputs.version }}" >> "$GITHUB_STEP_SUMMARY"
        echo "**APK-Name:** ${{ steps.build-info.outputs.apk-name }}" >> "$GITHUB_STEP_SUMMARY"
        echo "**APK-Gr√∂√üe:** ${{ steps.locate-apk.outputs.apk-size-mb }}MB" >> "$GITHUB_STEP_SUMMARY"
        echo "**Build-Nummer:** #${{ github.run_number }}" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "### üì¶ Artefakte" >> "$GITHUB_STEP_SUMMARY"
        echo "- Android APK verf√ºgbar in den Workflow-Artefakten" >> "$GITHUB_STEP_SUMMARY"
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then # Bedingte Ausgabe f√ºr Releases
          echo "- Release wurde automatisch erstellt" >> "$GITHUB_STEP_SUMMARY"
        fi
        
